'''I am assuming that each cluster of 7 LEDS will be on its own individual drivers,
 red is output A, 3 yellow is outputs B,C,D, 3 green is outputs E,F,G
I am assuming that the last daisy chained driver will correpsond to LED driver #4.. '''

import RPi.GPIO as GPIO 
import time

GPIO.setmode(GPIO.BCM)

# pins I am using 
SER=14
RCLK=15
SRCLK=18
SRCLR= 23
'''an array that of 12 integers that will account whether
 a given color group of LEDs is lit on a given cluster 
 the first three indices correspond to cluster 1, red, yellow , green and so on. 
0 means offf, 1 is on. '''
clusterStatus=[0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0]

# Global variables that will be passed into the drivers to light up a specfic color group.
GREEN_YELLOW_RED="01111111"
YELLOW_RED="00001111"
RED="00000001"
OFF= "00000000"

#setup the pins as outputs and set the clocks initally to low and the clear initially to high. 
def setup():
  GPIO.setup(SRCLR, GPIO.OUT)
  GPIO.setup(SER, GPIO.OUT)
  GPIO.setup(RCLK, GPIO.OUT)
  GPIO.setup(SRCLK, GPIO.OUT)

  GPIO.output(RCLK, GPIO.LOW)
  GPIO.output(SRCLK, GPIO.LOW)
  GPIO.output(SRCLR, GPIO.HIGH)

#using the commonly connected SRCLR to all the drivers, pulsing RCLK while this is 0  will clear all drivers and LEDs oFF?.
def clearAll():
  GPIO.output(SRCLR, GPIO.LOW)
  GPIO.output(RCLK, GPIO.LOW)
  time.sleep(0.05)
  GPIO.output(RCLK, GPIO.HIGH)
  GPIO.output(SRCLR, GPIO.HIGH)

  clusterStatus=[0 ,0 0, 0, 0, 0 ,0 ,0 , 0,0,0,0] #update the status array

'''Given a certain string of 1010, this function will set the serial input and pulse the SRCLK and RCLK so the 
given pattern from the string is displayed corrrectly on the LEDS.
Arugments: string clusterStatus'''
def passToLEDs(clusterStatus):
  
  for led in clusterStatus:
    if(led=="0"):
      GPIO.output(SER, GPIO.LOW)
    else:
     GPIO.output(SER, GPIO.HIGH)

    GPIO.output(SRCLK, GPIO.LOW)
    time.sleep(0.05)
    GPIO.output(SRCLK, GPIO.HIGH)
 
  GPIO.output(RCLK, GPIO.LOW) #pulse RCLK after all the inputs are loaded for a given cluster
  time.sleep(0.05)
  GPIO.output(RCLK, GPIO.HIGH)

'''This function allows you to turn on a given color group of a given cluster.
Arugments: int cluster(1-4) , char color group( r,y,g)'''
def selectClusterON( cluster, color)
   #get current status of the LEDs
  cluster1= readClusterStatus(1)
  cluster2=readClusterStatus(2)
  cluster3=readClusterStatus(3)
  cluster4= readClusterStatus(4)
  newCluster=""
  
  #determine new string that will be passed into the desire cluster based on the color desired. 
  if(color=='g'):
   newCluster=GREEN_YELLOW_RED
  else if (color == 'y'):
   newCluster= YELLOW_RED
  else if (color == 'r'):
   newCluster=RED
  else:
    print("invalid color selection in selectClusterON(), choose g, y, r ")
    break
  
  #keep the other clusters the same while updating the desired cluster LEDS
  if(cluster ==1):
    passToLEDs(cluster4)
    passToLEDs(cluster3)
    passToLEDs(cluster2)
    passToLEDs(newCluster)
  else if(cluster ==2):
    passToLEDs(cluster4)
    passToLEDs(cluster3)
    passToLEDs(newCluster)
    passToLEDs(cluster1)
  else if(cluster ==3)
    passToLEDs(cluster4)
    passToLEDs(newCluster)
    passToLEDs(cluster2)
    passToLEDs(cluster1)
  else if(cluster ==4)
    passToLEDs(newCluster)
    passToLEDs(cluster3)
    passToLEDs(cluster2)
    passToLEDs(cluster1)
   else:
     print("invlaid cluster selection in selectClusterON()")
     break
# update the status array
  updateClusterStatus(cluster, True, color)

'''This  function keeps track of changes made to  the clusters by updating the status array so that it is accurate.
Arguments: int cluster, bool on or off (T/F) , char for color group(r,y,g) '''
def updateClusterStatus(int cluster, bool on_off, char color='x'):
  # find cluster's position in the array
  index=0
  index +=(cluster-1)*3

#this happens when updating an entire cluster to turn off, since I only pass in two parameters from the OFF() funcction. 
  if(color== 'x'):
   clusterStatus[index]=0
   clusterStatus[index+1]=0
   clusterStatus[index+2]=0
  else:           #updating a cluster with a new color being turned on or off  
    if(color =='y'):
      index+=1
    else if(color =='g'):
      index+=2
    else:
      print("color erro in updateCLusterStatus() use r,y,g")
    if(on_off):
      clusterStatus[index]=1
    else:
      clusterStatus[index]=0

'''This function iterates its way through the status array and generates a string of 
8 binary digits representing whether a given LED is on or off for that specific cluster .
Argument: int cluster'''
def readClusterStatus(cluster):
  #to determine the start end positions of where to read from in the clusterStatus array
   #to generate the correct binary representation of the cluster.
  start= (cluster-1)*3
  stop=cluster*3
  '''the first digit corresponds to the red LED which there is only one of
then for  the next two digits, the have each 3 LEDs green and yellow hence 
why the string is concatenated as such'''
  ledString=""
  for i in range(start,stop):
   if(i%3 ==0):
     if (clusterStatus[i]==0): 
        ledString+= "0"
     else:
        ledString+="1"
   else:
      if(clusterStatus[i]==0):
          ledString+="000"
      else:
          ledString+="111"
  ledString+="0" #concatenate last 0 which is not connected to any led for any driver
  
'''I return the reverse of this concatenated string since the first input passed into the 
driver will end up being applied to the last connection on the driver'''
  return ledString[::-1] 


def selectClusterOFF(int cluster):
  cluster1= readClusterStatus(1)
  cluster2=readClusterStatus(2)
  cluster3=readClusterStatus(3)
  cluster4= readClusterStatus(4)
  newCluster=OFF

  if(cluster ==1):
    passToLEDs(cluster4)
    passToLEDs(cluster3)
    passToLEDs(cluster2)
    passToLEDs(newCluster)
  else if(cluster ==2):
    passToLEDs(cluster4)
    passToLEDs(cluster3)
    passToLEDs(newCluster)
    passToLEDs(cluster1)
  else if(cluster ==3)
    passToLEDs(cluster4)
    passToLEDs(newCluster)
    passToLEDs(cluster2)
    passToLEDs(cluster1)
  else if(cluster ==4)
    passToLEDs(newCluster)
    passToLEDs(cluster3)
    passToLEDs(cluster2)
    passToLEDs(cluster1)
   else:
     print("invlaid cluster selection in selectClusterOFF()")
     break
  
  updateClusterStatus(cluster, False)
